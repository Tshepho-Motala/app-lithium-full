[plantuml]
----
@startuml

!define p(name, alias) participant "name" as alias << (L,#AAFFCC) >>
!define pn(name, alias) participant "name" as alias << (L,#FFAAAA) >>
!define q(name, alias) queue "name" as alias << (L,#AAFFCC) >>
!define qn(name, alias) queue "name" as alias << (L,#FFAAAA) >>

autonumber

participant FE as fe
p("Server-OAuth2", oauth2)

box "service-user" #LightSkyBlue
p("UserProviderController", upController)
p("UserProviderService", userProviderService)
pn("UserPasswordHashAlgorithmService", userPasswordHashAlgorithmService)
end box

activate fe
fe -> oauth2: POST /oauth/token

activate oauth2
oauth2 -> upController: POST /users/auth

activate upController

note across
Regular authentication logic
end note

upController -> userProviderService: validatePassword

activate userProviderService
userProviderService -> userPasswordHashAlgorithmService: getUserPasswordHashAlgorithm

activate userPasswordHashAlgorithmService
userPasswordHashAlgorithmService --> userProviderService
deactivate userPasswordHashAlgorithmService

alt UserPasswordHashAlgorithm exist
  userProviderService -> userProviderService: validate password using hash algorithm and salt
  userProviderService --> upController
else
  userProviderService -> userProviderService: continue regular flow
  userProviderService --> upController
end
deactivate userProviderService

upController --> oauth2

deactivate upController

oauth2 --> fe

deactivate oauth2

deactivate fe

@enduml
----
[plantuml]
