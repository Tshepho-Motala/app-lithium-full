.iDin Integration via Sphonic Overview
[plantuml]
----
@startuml
'https://plantuml.com/sequence-diagram

actor player
boundary "Livescore App / GW" as lsa
participant "svc-user" as su
participant "svc-user-pr-sphonic-idin" as supsi
participant "svc-access" as sa
participant "svc-domain" as svcdomain
participant "svc-changelog" as svcchangelog
boundary "iDin Screens" as idin
participant Sphonic as sphonic

autonumber

== STEP#1: iDin START ==

player-->lsa: Register using iDin
activate lsa
    alt Resume session
        note right of lsa
            * On LivescoreApp the iDinApplicantHash may be stored in session
        end note
        lsa->lsa: retrieve iDinApplicantHash from session
        alt iDinApplicantHash found in session
            lsa->lsa: resume
                lsa->su: {{gateway}}/service-user/players/{domainName}/register/incomplete/v1?method=idin
                note left of su
                    PlayerBasic request body {
                        "stage": "1",
                        "additionalData": {
                            "iDinReturnUrl": "http://returnURL"
                            "iDinApplicantHash" : "39b6763cd1ae527f04965e647c04"
                        }
                    }
                end note

                activate su
                    su->su: resolve idin registration provider (service-user-provider-sphonic-idin)
                    su->su: buildUserDetailsRequest
                    su->supsi: {{gateway}}/service-user-provider-sphonic-idin/system/external-register
                    note left of supsi
                        ExternalUserDetailsRequest {
                            "stage": 1,
                            "domainName": "livescore_nl",
                            "playerBasic": {
                                "additionalData": {
                                    "iDinReturnUrl": "http://returnURL",
                                    "playerIpAddress": "5.250.191.25",
                                    "iDinApplicantHash" : "39b6763cd1ae527f04965e647c04"
                                }
                            }
                        }
                    end note
                    activate supsi
                        supsi->supsi: Validate iDinApplicantHash
                        supsi->supsi: Fetch iDinVerificationUrl using iDinApplicantHash
                        supsi->supsi: buildExternalUserDetailsResponse
                        note left of supsi
                            ExternalUserDetailsResponse {
                                "stage": 1,
                                "domainName": "livescore_nl",
                                "outcome": "Success"
                                "playerBasic": {
                                    "additionalData"": {
                                        "iDinApplicantHash": "39b6763cd1ae527f04965e647c04",
                                        "iDinVerificationUrl": "https://test.vmb.fyi/s/BZYGCA"
                                    }
                                }
                            }
                        end note
                        supsi-->su: Response ExternalUserDetailsResponse
                        su -->su : Find or create incomplete_user using iDinApplicantHash
                        su --> su : map incomplete_user to playerBasic
                        su -> lsa : Response playerBasic
                    deactivate supsi
        end
    end
    lsa->su: {{gateway}}/service-user/players/{domainName}/register/incomplete/v1?method=idin
    note left of su
        PlayerBasic request body {
            "stage": "1",
            "additionalData": {
                "iDinReturnUrl": "http://returnURL",
                "iDinApplicantHash" : null
            }
        }
    end note
    alt method=idin, stage=1
        activate su
            su->su: resolve idin registration provider (service-user-provider-sphonic-idin)
            su->su: buildUserDetailsRequest
            su->supsi: {{gateway}}/service-user-provider-sphonic-idin/system/external-register
            note left of supsi
                ExternalUserDetailsRequest {
                    "stage": 1,
                    "domainName": "livescore_nl",
                    "playerBasic": {
                        "additionalData": {
                            "iDinReturnUrl": "http://returnURL",
                            "playerIpAddress": "5.250.191.25"
                        }
                    }
                }
            end note
            activate supsi
                supsi->supsi: Generates unique iDinApplicantHash
                supsi->supsi: Creates a new idin_request
                note right of supsi
                    * ** requestId **: to be generated by Lithium
                        * requestId is used by Sphonic as a correlation id between multiple requests

                    * ** iDinApplicantHash **: will be generated by Lithium and needs to be unique
                        * Each hash will be linked to an applicantId where the applicantId would simply be the id on idin_request table
                        * The hash should be generated using the playerIpAddress and timestamp

                    * ** returnUrl **:
                        * Later in the flow as part of the iDin redirect back to returnUrl -> Livescore App would make use of the iDinApplicantHash
                           to retrieve the applicant data and would populate the registration screens with the applicant data as needed.

                    ** An incomplete user will be created and associated to the iDinApplicantHash and will also store the stage, createdDate and lastModifiedDate which may be used to see where players drops off in the process. **
                end note
                supsi -> sphonic: get access token
                activate sphonic
                    sphonic -->> supsi: accessToken
                deactivate sphonic
                supsi->sphonic: iDinStart Worflow request(requestId, applicationId, returnUrl)
                note left of sphonic
                    IDINStart Request: {
                      "requestDetails": {
                        "requestId": "{{lithiumRequestId}}",
                        "requestDateTime": "2022-03-16T13:03:43"
                      },
                      "requestData": {
                        "Applicant_Reference": "{{idinRequest.id}}",
                        "Return_URL": "https://applicaton.livescore.net/holdingpage"
                      }
                    }
                end note
                activate sphonic
                    note left of sphonic
                        IDINStart Response: {
                           "sphonicResponse": {
                               "data": {
                                   "responseDateTime": "2021-11-09T17:32:28Z",
                                   "livescoreRequestId": "{{lithiumRequestId}}",
                                   "livescoreAppliantId": "{{idinRequest.id}}",
                                   "sphonicTransactionId": "56c14f84-bf73-4355-88ab-9d6985ebbd22",
                                   "bluemTransactionId": "a117638133e7277",
                                   "identURL": "https://test.vmb.fyi/s/BZYGCA"
                               }
                           }
                       }
                    end note
                    sphonic-->supsi: iDinStart Worflow response(bluemTransactionId, verificationUrl=identURL)
                deactivate sphonic
                supsi->supsi: updates idin_request table with iDinStart response fields
                note right of supsi
                    * Adds bluemTransactionId and verificationUrl to idin_request table for later retrieval via the iDinApplicantHash that was used to create the idin_request record
                end note
                supsi->supsi: store iDinStart Worflow response as json string on new table on idin_response
                supsi->supsi: buildExternalUserDetailsResponse
                note left of supsi
                    ExternalUserDetailsResponse {
                        "stage": 1,
                        "domainName": "livescore_nl",
                        "outcome": "Success"
                        "playerBasic": {
                            "additionalData"": {
                                "iDinApplicantHash": "averyuniquehash",
                                "iDinVerificationUrl": "https://test.vmb.fyi/s/BZYGCA"
                            }
                        }
                    }
                end note
                supsi-->su: Response ExternalUserDetailsResponse
            deactivate supsi
            su->su: creates new incomplete_user with iDinVerificationUrl and iDinApplicantHash stored as incomplete_user_label_value's
            su->su: map userDetailsResponse.playerBasic to Incomplete register playerBasic request body
        end
        note left of su
            * For method=idin, we will be removing the incomplete_user.id from the Incomplete User response since the iDinApplicantHash would need
              to be used as a secure identifier when returning on stage 2 when continuing the iDin registration journey
        end note
        su-->lsa: Response Incomplete User
    deactivate su
    lsa->lsa: Adds iDinApplicantHash to session
    note right of lsa
        * iDin will be keeping state for up to 90 days after consent has been provided and therefore should the user have
          completed the iDin external screen flows (STEP#2) but have not completed the registration flow (STEP#3), then the LivescoreApp may resume
          at STEP#3 using the returnURL and iDinApplicantHash.
        * Should the iDin outcome be Expired or Cancelled, then the iDinApplicantHash needs to be removed from the LivescoreApp session and have the process re-started from STEP#1

        Outcomes from iDin:
        * Expired
          * Remove iDinApplicantHash from session on LivescoreApp and restart at STEP#1
        * Cancelled
          * Remove iDinApplicantHash from session on LivescoreApp and restart at STEP#1
        * Success
          * Need to re-join at STEP#3 by redirecting to returnURL using iDinApplicantHash that was stored in session
        * Failure
          * Remove iDinApplicantHash from session on LivescoreApp and restart at STEP#1
    end note
@enduml
----
