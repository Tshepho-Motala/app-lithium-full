/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package lithium.service.mock.gamstop.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lithium.service.mock.gamstop.model.Exclusions;
import lithium.service.mock.gamstop.model.Persons;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.text.ParseException;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-22T18:03:17.345Z")

@Tag(name = "v2", description = "the v2 API")
@RequestMapping(value = "")
public interface V2Api {

    @Operation(summary = "Search for person", requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(content = {@Content(mediaType = "application/x-www-form-urlencoded")}),
            security = {@SecurityRequirement(name = "X-API-Key")})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Returned for a normal search", content = {@Content(mediaType = "application/x-www-form-urlencoded")}),
            @ApiResponse(responseCode = "400", description = "Returned if missing parameters"),
            @ApiResponse(responseCode = "403", description = "Returned if API key invalid or IP address not in range"),
            @ApiResponse(responseCode = "405", description = "Returned for non-POST calls")})
    @RequestMapping(value = "/v2/single",
            produces = {"application/x-www-form-urlencoded"},
            consumes = {"application/x-www-form-urlencoded"},
            method = RequestMethod.POST)
    ResponseEntity<Void> v2PostSingle(@Parameter(name = "First name of person", required = true) @RequestParam(value = "firstName", required = true) String firstName, @Parameter(name = "Last name of person", required = true) @RequestParam(value = "lastName", required = true) String lastName, @Parameter(name = "Date of birth in ISO format (yyyy-mm-dd)", required = true) @RequestParam(value = "dateOfBirth", required = true) String dateOfBirth, @Parameter(name = "Email address", required = true) @RequestParam(value = "email", required = true) String email, @Parameter(name = "Postcode - spaces not significant", required = true) @RequestParam(value = "postcode", required = true) String postcode, @Parameter(name = "UK mobile telephone number which may include spaces, hyphens and optionally be prefixed with the international dialling code (+44, 0044, +353, 00353).", required = true) @RequestParam(value = "mobile", required = true) String mobile, @Parameter(name = "A freeform field that is put into the audit log that can be used by the caller to identify a request. This might be something to indicate the person being checked (in some psuedononymous fashion), a unique request ID, or a trace ID from a system such as zipkin") @RequestHeader(value = "X-Trace-Id", required = false) String xTraceId) throws ParseException;

    @Operation(summary = "Batch search for person", description = "Request should be less than 256KB in size", security = {@SecurityRequirement(name = "X-API-Key")})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Returned for a normal search", content = {@Content(mediaType = "application/json",
                    schema = @Schema(implementation = Exclusions.class))}),
            @ApiResponse(responseCode = "400", description = "Returned if missing parameters or null", content = @Content),
            @ApiResponse(responseCode = "403", description = "Returned if API key invalid, IP address not in range or rate limited", content = @Content),
            @ApiResponse(responseCode = "405", description = "Returned for non-POST calls", content = @Content)})
    @RequestMapping(value = "/v2/batch",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Exclusions> v2PostBatch(@Parameter(name = "The list of persons to search", required = true) @Valid @RequestBody Persons persons, @Parameter(name = "A freeform field that is put into the audit log that can be used by the caller to identify a request. This might be something to indicate the person being checked (in some psuedononymous fashion), a unique request ID, or a trace ID from a system such as zipkin") @RequestHeader(value = "X-Trace-Id", required = false) String xTraceId);


    @Operation(summary = "List of persons", description = "Request should be less than 256KB in size", security = {@SecurityRequirement(name = "X-API-Key")})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Returned for a successful upload"),
            @ApiResponse(responseCode = "400", description = "Returned if missing parameters or null", content = @Content),
            @ApiResponse(responseCode = "403", description = "Returned if API key invalid, IP address not in range or rate limited", content = @Content),
            @ApiResponse(responseCode = "405", description = "Returned for non-POST calls", content = @Content)})
    @RequestMapping(value = "/v2/upload",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Persons> v2Upload(@Parameter(name = "The list of persons to upload", required = true) @Valid @RequestBody Persons persons);

    @Operation(summary = "List of persons", description = "Request should be less than 256KB in size",
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(content = {@Content(mediaType = "application/json")}),
            security = {@SecurityRequirement(name = "X-API-Key")})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Returned for a reset"),
            @ApiResponse(responseCode = "403", description = "Returned if API key invalid, IP address not in range or rate limited", content = @Content),
            @ApiResponse(responseCode = "405", description = "Returned for non-POST calls", content = @Content)})
    @RequestMapping(value = "/v2/reset",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Persons> v2Reset();
}
