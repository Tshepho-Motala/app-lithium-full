package lithium.metrics;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * The {@code CountThisMethod} annotation provides counter and metrics reporting
 * for methods utilising the currently configured spring metrics context.
 * <p>
 * This means that the method will be visible via the Spring Boot Actuator metrics
 * endpoint if configured, and will be reported to graphite / grafana in the case of the
 * default Lithium configuration.
 * <p>
 * The annotation will be picked up by the {@link LithiumMetricsCounterAspect} via the {@link EnableLithiumMetrics}
 * Spring Boot auto-configuration annotation (which is configured automatically for
 * services extending from {@link lithium.services.LithiumService}).
 * <p>
 * It is important to note that the annotation will only work if the caller is not within the same class, and
 * the class should be obtained via a spring context (ie, it has to be a bean of some sorts). This because it depends
 * on an aspect proxy generated by Spring during bean creation. The caller will not receive the instance of the bean
 * directly, but rather a proxy created by Spring that intercepts all calls.
 *
 * The default will skip any info logging, and log warnings for methods taking longer than 800ms to execute.
 * <p>
 * In order to test, simply set the info threshold to 0ms in your local application.yml for your service (do not commit).
 * <p>
 * @see <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html">Spring Boot Metrics</a>
 */

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface CountThisMethod {
}
